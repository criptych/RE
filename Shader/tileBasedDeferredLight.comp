#version 430 core

#include "Include/DeferredPassTex.incl"
#include "Include/CommonLighting.incl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba16f) writeonly uniform image2D outColor;

#define SPHERE_CULLING 0
#define CONE_CULLING 1
#define USE_CONE_DEPTH 1

shared uint maxTileDepthUintBits;
shared uint minTileDepthUintBits;
shared uint tileLightCount;
shared uint tileLightIndices[MAX_TILE_LIGHTS];

float ConditionalMin(float A, float B)
{
	float minAB = min(A, B);
	float maxAB = max(A, B);
	return minAB < 0 ? maxAB : minAB;
}

float ConditionalMax(float A, float B)
{
	return max(A, B);
}

void main() 
{	
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 outputSize = imageSize(outColor);
	
	vec2 uv = vec2(pixel_coords) / (resolution.xy);
		
	float depth = texture(gDepthStencilTex, uv).r;
	
	if(gl_LocalInvocationIndex == 0)
	{
		maxTileDepthUintBits = 0;
		minTileDepthUintBits = 0x7F7FFFFF; // max float
		tileLightCount = 0;
	}	
	barrier(); // all invocation sync to this point
	memoryBarrierShared(); // writes to shared variables now visible for read
	
	float depthValue = -1;
	// find out min/max depth
	if(depth < 1 && pixel_coords.x < outputSize.x && pixel_coords.y < outputSize.y)
	{
		float depthValue = depth;
#if CONE_CULLING && USE_CONE_DEPTH
		float viewZ = GetViewZFromDepth(depth, projMat);
		vec3 posCS = vec3((uv * 2.0 - 1.0) / vec2(projMat[0][0], projMat[1][1]), -1);
		depthValue = length(posCS) * abs(viewZ);
#endif
		uint depthUnitBits = floatBitsToInt(depthValue);
		atomicMax(maxTileDepthUintBits, depthUnitBits);
		atomicMin(minTileDepthUintBits, depthUnitBits);
	}
	
	barrier();
	memoryBarrierShared();
	
	// skip tiles fully on skybox
	if(minTileDepthUintBits == 0x7F7FFFFF)
		return;
	
	float maxTileDepth = uintBitsToFloat(maxTileDepthUintBits);
	float minTileDepth = uintBitsToFloat(minTileDepthUintBits);
			
	vec2 halfRes = (resolution.xy) * 0.5;
	vec2 wh = vec2(projMat[0][0], projMat[1][1]) * halfRes;
#if SPHERE_CULLING
	// top left
	vec2 tileOffset0 = (halfRes - gl_WorkGroupID.xy * gl_WorkGroupSize.xy);
	// bottom right
	vec2 tileOffset1 = tileOffset0 - gl_WorkGroupSize.xy;
	
	vec2 tileOffsetNorm0 = -tileOffset0 / wh;
	vec2 tileOffsetNorm1 = -tileOffset1 / wh;
	vec3 topLeft = normalize(vec3(tileOffsetNorm0.x, tileOffsetNorm0.y, -1));
	vec3 topRight = normalize(vec3(tileOffsetNorm1.x, tileOffsetNorm0.y, -1));
	vec3 bottomLeft = normalize(vec3(tileOffsetNorm0.x, tileOffsetNorm1.y, -1));
	vec3 bottomRight = normalize(vec3(tileOffsetNorm1.x, tileOffsetNorm1.y, -1));	
	
	// left, right, top, bottom
	vec3 sideCenters[4];
	vec3 sideNormals[4];
	vec3 sideTangents[4];
	float sideSizes[4];
	sideCenters[0] = normalize((topLeft + bottomLeft) * 0.5);
	sideSizes[0] = dot(sideCenters[0], topLeft);
	sideCenters[1] = normalize((topRight + bottomRight) * 0.5);
	sideSizes[1] = dot(sideCenters[1], topRight);
	sideCenters[2] = normalize((topLeft + topRight) * 0.5);
	sideSizes[2] = dot(sideCenters[2], topLeft);
	sideCenters[3] = normalize((bottomLeft + bottomRight) * 0.5);
	sideSizes[3] = dot(sideCenters[3], bottomLeft);
	sideNormals[0] = normalize(vec3(-wh.x, 0, tileOffset0.x));	// left
	sideNormals[1] = normalize(vec3(wh.x, 0, -tileOffset1.x));	// right
	sideNormals[2] = normalize(vec3(0, -wh.y, tileOffset0.y));	// top
	sideNormals[3] = normalize(vec3(0, wh.y, -tileOffset1.y));	// bottom
	for(int i = 0; i < 4; ++i)
	{
		sideTangents[i] = cross(sideNormals[i], sideCenters[i]);		
	}
	
	float frustumNear = GetViewZFromDepth(minTileDepth, projMat);
	float frustumFar = GetViewZFromDepth(maxTileDepth, projMat);
	
	// culling, here each thread run a light
	uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	for(uint lightIdx = gl_LocalInvocationIndex; lightIdx < localLightCount && tileLightCount < MAX_TILE_LIGHTS; lightIdx += threadCount)
	{
		vec4 lightBounds = localLightsBounds[lightIdx];		
		vec3 boundCenter = lightBounds.xyz;
		float boundRadius = lightBounds.w;
		float boundDist = length(boundCenter);
		vec3 boundDir = boundCenter / boundDist;
		float boundSin = clamp(boundRadius / boundDist, 0.0, 1.0);
		float boundCos = sqrt(1 - boundSin * boundSin);
		
		float minCos = 1;
		for(int i = 0; i < 4; ++i)
		{
			float LdotN = dot(boundDir, sideNormals[i]);
			if(LdotN <= 0)
				continue;
				
			vec3 boundProj = normalize(boundDir - LdotN * sideNormals[i]);
			float cosTheta = dot(boundProj, sideCenters[i]);
			cosTheta = max(cosTheta, sideSizes[i]);
			float sinTheta = sqrt(1 - cosTheta * cosTheta) * sign(dot((sideCenters[i], boundProj),sideNormals[i]));
			vec3 adjEdge = sideCenters[i] * cosTheta + sideTangents[i] * sinTheta;
			minCos = min(minCos, dot(adjEdge, boundDir));
		}
		
		if(minCos >= boundCos &&
			boundCenter.z - frustumNear <= boundRadius &&
			frustumFar - boundCenter.z <= boundRadius)
		{
		
			// light over lap this tile
			uint tileLightListIdx = atomicAdd(tileLightCount, 1);
			tileLightIndices[tileLightListIdx] = lightIdx;
		}
	}	
#elif CONE_CULLING
	// top left
	vec2 tileOffset0 = (halfRes - gl_WorkGroupID.xy * gl_WorkGroupSize.xy);
	// bottom right
	vec2 tileOffset1 = tileOffset0 - gl_WorkGroupSize.xy;
	
	vec2 tileOffsetNorm0 = -tileOffset0 / wh;
	vec2 tileOffsetNorm1 = -tileOffset1 / wh;
	vec3 sides[4];
	sides[0] = normalize(vec3(tileOffsetNorm0.x, tileOffsetNorm0.y, -1)); // top left
	sides[1] = normalize(vec3(tileOffsetNorm1.x, tileOffsetNorm0.y, -1)); // top right
	sides[2] = normalize(vec3(tileOffsetNorm0.x, tileOffsetNorm1.y, -1)); // bottom left
	sides[3] = normalize(vec3(tileOffsetNorm1.x, tileOffsetNorm1.y, -1)); // bottom right
	vec3 center = normalize(sides[0] + sides[1] + sides[2] + sides[3]);
	float coneCos = min(min(min(dot(center, sides[0]), dot(center, sides[1])), dot(center, sides[2])), dot(center, sides[3]));
	float coneSin = sqrt(1 - coneCos * coneCos);
	
#if !USE_CONE_DEPTH
	float frustumNear = GetViewZFromDepth(minTileDepth, projMat);
	float frustumFar = GetViewZFromDepth(maxTileDepth, projMat);
#endif
	
	// culling, here each thread run a light
	uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	for(uint lightIdx = gl_LocalInvocationIndex; lightIdx < localLightCount && tileLightCount < MAX_TILE_LIGHTS; lightIdx += threadCount)
	{
		vec4 lightBounds = localLightsBounds[lightIdx];		
		vec3 boundCenter = lightBounds.xyz;
		float boundRadius = lightBounds.w;
		float boundDistSqr = dot(boundCenter, boundCenter);
		float boundDist = sqrt(boundDistSqr);
		vec3 boundDir = boundCenter / boundDist;
		float boundSin = clamp(boundRadius / boundDist, 0.0, 1.0);
		float boundCos = sqrt(1 - boundSin * boundSin);
		
		float lightCos = dot(boundDir, center);
		float lightSin = sqrt(1 - lightCos * lightCos);
		float diffCos = (boundRadius > boundDist) ? -1.0 : coneCos * boundCos - coneSin * boundSin;
		
		// cone depth angle = light angle - cone angle
		float coneDepthSin = clamp(lightSin * coneCos - lightCos * coneSin, 0.0, 1.0);
		float coneDepthCos = (coneDepthSin == 0.0) ? 1.0 : lightCos * coneCos + lightSin * coneSin;
		float coneDepthRadius = sqrt(boundRadius * boundRadius - boundDistSqr * coneDepthSin * coneDepthSin);
		float coneDepthBaseLen = boundDist * coneDepthCos;
		
		if(lightCos >= diffCos &&
#if !USE_CONE_DEPTH
			boundCenter.z - frustumNear <= boundRadius &&
			frustumFar - boundCenter.z <= boundRadius)
#else
			coneDepthBaseLen - coneDepthRadius <= maxTileDepth &&
			coneDepthBaseLen + coneDepthRadius >= minTileDepth)
#endif
		{
		
			// light over lap this tile
			uint tileLightListIdx = atomicAdd(tileLightCount, 1);
			tileLightIndices[tileLightListIdx] = lightIdx;
		}
	}	
#else
	// top left
	vec2 tileOffset0 = (halfRes - gl_WorkGroupID.xy * gl_WorkGroupSize.xy);
	// bottom right
	vec2 tileOffset1 = tileOffset0 - gl_WorkGroupSize.xy;
	
	// in view space, only side planes, we do near/far separately 
	vec3 frustumPlanes[4];
	frustumPlanes[0] = normalize(vec3(wh.x, 0, -tileOffset0.x));	// left
	frustumPlanes[1] = normalize(vec3(-wh.x, 0, tileOffset1.x));	// right
	frustumPlanes[2] = normalize(vec3(0, wh.y, -tileOffset0.y));	// top
	frustumPlanes[3] = normalize(vec3(0, -wh.y, tileOffset1.y));	// bottom
	float frustumNear = GetViewZFromDepth(minTileDepth, projMat);
	float frustumFar = GetViewZFromDepth(maxTileDepth, projMat);
	
	// culling, here each thread run a light
	uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	for(uint lightIdx = gl_LocalInvocationIndex; lightIdx < localLightCount && tileLightCount < MAX_TILE_LIGHTS; lightIdx += threadCount)
	{
		vec4 lightBounds = localLightsBounds[lightIdx];		
		vec3 boundCenter = lightBounds.xyz;
		float boundRadius = lightBounds.w;
		
		// result < 0 if light sphere bound is outside any plane
		float result = min(dot(frustumPlanes[0], boundCenter) + boundRadius, 0.0) +
			min(dot(frustumPlanes[1], boundCenter) + boundRadius, 0.0) +
			min(dot(frustumPlanes[2], boundCenter) + boundRadius, 0.0) +
			min(dot(frustumPlanes[3], boundCenter) + boundRadius, 0.0);
				
		if(result == 0 &&
			boundCenter.z - frustumNear <= boundRadius &&
			frustumFar - boundCenter.z <= boundRadius)
		{
		
			// light over lap this tile
			uint tileLightListIdx = atomicAdd(tileLightCount, 1);
			tileLightIndices[tileLightListIdx] = lightIdx;
		}
	}
#endif
	
	barrier();
	memoryBarrierShared();
	
#if 0
	// color code for light count
	vec3 colorCode = vec3(0,0,0);
	if(tileLightCount == 1)
		colorCode = vec3(1,0,0);
	else if(tileLightCount == 2)
		colorCode = vec3(0,1,0);
	else if(tileLightCount == 3)
		colorCode = vec3(0,0,1);
	else if(tileLightCount == 4)
		colorCode = vec3(1,1,0);
	else if(tileLightCount > 4)
		colorCode = vec3(1,0,1);
		
	imageStore(outColor, pixel_coords, vec4(colorCode, 0.0));
	return;
#endif
	
	//imageStore(outColor, pixel_coords, vec4(vec3(GetLinearDepth(minTileDepth, resolution.z, resolution.w)), 0.0));
	
	// lighting
	if(depth < 1 && pixel_coords.x < outputSize.x && pixel_coords.y < outputSize.y)
	{
		vec3 lightingResult = vec3(0);
		vec3 positionVS = vec3((uv * 2.0 - 1.0) / vec2(projMat[0][0], projMat[1][1]), -1);
		vec3 normal = normalize(texture(gNormalTex, uv).rgb * 2.0f - 1.0f);
		vec3 position = GetPositionVSFromDepth(depth, projMat, positionVS);
		vec3 view = normalize(-position);
		vec3 albedo = texture(gAlbedoTex, uv).rgb;
		vec4 material = texture(gMaterialTex, uv);
		float metallic = material.r;
		float roughness = material.g;
		float ao = material.a;
		
		// global lights
		CalcGlobalLights(lightingResult, position, normal, view, albedo, metallic, roughness, ao);
		
		// local lights
		uint affectedLocalLightCount = tileLightCount;
		for(uint i = 0; i < affectedLocalLightCount; ++i)
		{
			uint lightIdx = tileLightIndices[i];
			Light light = localLights[lightIdx];
			
			vec3 localLightResult = CalcLight(light, normal, position, view, albedo.rgb, metallic, roughness);
			float shadowFactor = CalcShadowGeneral(light, position, normal);
			lightingResult += localLightResult * min(shadowFactor, 1-ao);
		}
	
		//vec2 localUV = vec2(gl_LocalInvocationID.xy) / vec2(gl_WorkGroupSize.xy);
	
	
		imageStore(outColor, pixel_coords, vec4(lightingResult, 0.0));
	}
}