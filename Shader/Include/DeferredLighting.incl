#ifndef DEFERRED_LIGHTING_INCL
#define DEFERRED_LIGHTING_INCL

#include "CommonConst.incl"

struct Light 
{
	vec4 positionInvR; // xyz position, w invRadius
	vec3 direction;
	vec3 color;
	vec4 attenParams; // x bRadial, y bSpot, z outerCosHalfAngle, w invDiffCosHalfAngle 
};

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness * roughness;
	float a2 = a*a;
	float NdotH = max(dot(N, H), 0.f);
	float dnom = (NdotH * NdotH) * (a2 - 1) + 1;
	return a2 / (PI * dnom * dnom);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float k = (roughness + 1) * (roughness + 1) / 8.f;
	return NdotV / (NdotV * (1-k) + k);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float ggx1 = GeometrySchlickGGX(max(dot(N, L), 0.f), roughness);
	float ggx2 = GeometrySchlickGGX(max(dot(N, V), 0.f), roughness);
	return ggx1 * ggx2;
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

vec3 CalcLightPBR(vec3 L, vec3 N, vec3 V, vec3 lightColor, vec3 albedo, float metallic, float roughness, float attenuation)
{
	vec3 H = normalize(L + V);
	
	vec3 F0 = vec3(0.04f);
	F0 = mix(F0, albedo, metallic);
	
	vec3 radiance = lightColor * attenuation;
	
	// cook-torrance BRDF
	float NDF = DistributionGGX(N, H, roughness);
	float G = GeometrySmith(N, V, L, roughness);
	vec3 F = FresnelSchlick(clamp(dot(H, V), 0.f, 1.f), F0);
	
	vec3 kS = F;
	vec3 kD = vec3(1.0f) - kS;
	kD *= (1.0f - metallic);
	
	vec3 brdf = (NDF * G * F) / (4 * max(dot(N, V), 0.f) * max(dot(N, L), 0.f) + 0.001f);
		
	return (kD * albedo / PI + brdf) * radiance * max(dot(N, L), 0.f);
}

vec3 CalcLightBlinnPhong(vec3 light, vec3 normal, vec3 view, vec3 lightColor, vec3 albedo, float attenuation)
{
	vec3 halfVec = normalize(light + view);
	
	vec3 diff = albedo * max(dot(normal, light), 0.f) * lightColor * attenuation;
	vec3 spec = pow(max(dot(normal, halfVec), 0.f), /*specPower =*/32.f) * lightColor * attenuation;
	//spec = vec3(0,0,0);
	
	//return vec3(specV, specV, specV);
	return diff + spec;
}

vec3 GetGBufferPositionVS(float depth, mat4 projMat, vec3 fragPosVS)
{
	float ndcZ = depth * 2.f - 1.f;
	float viewZ = projMat[3][2] / (projMat[2][3] * ndcZ - projMat[2][2]);
	return fragPosVS / fragPosVS.z * viewZ;
	
	// ref:
	// https://www.khronos.org/opengl/wiki/Compute_eye_space_from_window_space
	// https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
	// https://mynameismjp.wordpress.com/2010/03/22/attack-of-the-depth-buffer/
}

vec3 CalcLight(Light lightData, vec3 normal, vec3 pos, vec3 view, vec3 albedo, float metallic, float roughness)
{
	vec3 light = -lightData.direction;
	float attenuation = 1.f;
	if(lightData.attenParams.x > 0.5f)
	{
		light = lightData.positionInvR.xyz - pos;
		float dist = length(light);
		light /= dist;
		float attRatio = min(dist * lightData.positionInvR.w, 1.f);
		// based on unreal
		//attenuation = (1 - attRatio) * (1 - attRatio);
		attenuation = (1 - attRatio * attRatio * attRatio * attRatio);
		attenuation = (attenuation * attenuation) / (dist * dist + 1);
	}
	if(lightData.attenParams.y > 0.5f)
	{
		//float spotRatio = min((1 - dot(light, -lightData.direction)) / (1 - lightData.cosHalfAngle), 1.f);
		//attenuation *= (1 - spotRatio);
		float spotRatio = clamp((dot(light, -lightData.direction) - lightData.attenParams.z) * lightData.attenParams.w, 0.f, 1.f);
		attenuation *= spotRatio;
	}
	
	//return CalcLightBlinnPhong(light, normal, view, lightData.color, albedo, attenuation);
	return CalcLightPBR(light, normal, view, lightData.color, albedo, metallic, roughness, attenuation);
}

#endif