#ifndef DEFERRED_LIGHTING_INCL
#define DEFERRED_LIGHTING_INCL

#include "Common.incl"

struct Light 
{
	vec4 positionInvR; // xyz position, w invRadius
	vec4 directionRAB; // xyz direction, w radial attenuation blend value
	vec3 color;
	vec4 attenParams; // x bRadial, y bSpot, z outerCosHalfAngle, w invDiffCosHalfAngle 
	int shadowDataCount;
};

float DistributionGGX(float NdotH, float roughness)
{
	float a = roughness * roughness;
	float a2 = a*a;
	float dnom = (NdotH * NdotH) * (a2 - 1) + 1;
	return a2 / (PI * dnom * dnom);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float k = (roughness + 1) * (roughness + 1) / 8.f;
	return NdotV / (NdotV * (1-k) + k);
}

float GeometrySmith(float NdotL, float NdotV, float roughness)
{
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	return ggx1 * ggx2;
}

float GeometrySmithBaked(float NdotL, float NdotV, float roughness)
{
	float k = (roughness + 1) * (roughness + 1) / 8.f;
	return 1.0 / (4 * (NdotV * (1-k) + k) * (NdotL * (1-k) + k) + 0.0001f);
}

float GeometrySmithJointBaked(float NdotL, float NdotV, float roughness)
{
	float k = (roughness * roughness);
	return 1.0 / (2 * mix(2 * NdotL * NdotV, NdotL + NdotV, k) + 0.0001f);
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
	// based on unreal approximation
	//return F0 + (1.0f - F0) * exp2((-5.55473 * cosTheta - 6.98316) * cosTheta);
	return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

vec3 CalcLightPBR(vec3 L, vec3 N, vec3 V, vec3 lightColor, vec3 albedo, float metallic, float roughness, float attenuation)
{
	vec3 H = normalize(L + V);
	float NdotH = max(dot(N, H), 0.f);
	float VdotH = max(dot(H, V), 0.f);
	float NdotL = max(dot(N, L), 0.f);
	float NdotV = max(dot(N, V), 0.f);
	
	vec3 F0 = vec3(0.04f);
	F0 = mix(F0, albedo, metallic);
	
	vec3 radiance = lightColor * attenuation;
	
	// cook-torrance BRDF
	float NDF = DistributionGGX(NdotH, roughness);
	float G = GeometrySmith(NdotL, NdotV, roughness);
	vec3 F = FresnelSchlick(VdotH, F0);
	
	vec3 kS = F;
	vec3 kD = vec3(1.0f) - kS;
	kD *= (1.0f - metallic);
	
	vec3 brdf = (NDF * G * F) / (4 * max(dot(N, V), 0.f) * max(dot(N, L), 0.f) + 0.001f);
		
	return (kD * albedo / PI + brdf) * radiance * max(dot(N, L), 0.f);
}

// http://www.gdcvault.com/play/1024478/PBR-Diffuse-Lighting-for-GGX
vec3 CalcLightPBR_op(vec3 L, vec3 N, vec3 V, vec3 lightColor, vec3 albedo, float metallic, float roughness, float attenuation)
{
	float NdotL = max(dot(N, L), 0.f);
	float NdotV = max(dot(N, V), 0.f);
	
	float LdotV = dot(L, V); 
	float rcpLen_LV = inversesqrt(2 + 2 * LdotV);
	
	float NdotH = (NdotL + NdotV) * rcpLen_LV;
	float VdotH = rcpLen_LV + rcpLen_LV * LdotV;
	
	vec3 F0 = vec3(0.04f);
	F0 = mix(F0, albedo, metallic);
	
	vec3 radiance = lightColor * attenuation;
	
	// cook-torrance BRDF
	float NDF = DistributionGGX(NdotH, roughness);
	float G = GeometrySmith(NdotL, NdotV, roughness);
	vec3 F = FresnelSchlick(VdotH, F0);
	
	vec3 kS = F;
	vec3 kD = vec3(1.0f) - kS;
	kD *= (1.0f - metallic);
	
	vec3 brdf = (NDF * G * F) / (4 * NdotV * NdotL + 0.001f);
		
	return (kD * albedo / PI + brdf) * radiance * NdotL;
}

// http://www.gdcvault.com/play/1024478/PBR-Diffuse-Lighting-for-GGX
vec3 CalcLightPBR2(vec3 L, vec3 N, vec3 V, vec3 lightColor, vec3 albedo, float metallic, float roughness, float attenuation)
{
	float NdotL = max(dot(N, L), 0.f);
	float NdotV = max(dot(N, V), 0.f);
	
	float LdotV = dot(L, V); 
	float rcpLen_LV = inversesqrt(2 + 2 * LdotV);
	
	float NdotH = (NdotL + NdotV) * rcpLen_LV;
	float VdotH = rcpLen_LV + rcpLen_LV * LdotV;
	
	vec3 F0 = vec3(0.04f);
	F0 = mix(F0, albedo, metallic);
	
	vec3 radiance = lightColor * attenuation;
	
	float NDF = DistributionGGX(NdotH, roughness);
	vec3 F = FresnelSchlick(VdotH, F0);
#if 1	
	float G = GeometrySmithJointBaked(NdotL, NdotV, roughness);
#else	
	float G = GeometrySmithBaked(NdotL, NdotV, roughness);
#endif
	
	vec3 brdf_spec = min(NDF * G * F, 1.0);
	
	float facing = 0.5 + 0.5 * LdotV;
	float diffRough = facing * (0.9 - 0.4 * facing) * (0.5 + NdotH) / (NdotH + 0.001f);
	float diffSmooth = 1.05 * (1 - pow(1-NdotL, 5)) * (1 - pow(1-NdotV, 5));
	float single = mix(diffSmooth, diffRough, roughness) / PI;
	float multi = 0.1159 * roughness;
	
	vec3 brdf_diff = albedo * (single + albedo * multi);
		
	//return ((1.0f - metallic) * (1 - F) * albedo / PI + brdf_spec) * radiance * NdotL;
	//return (brdf_spec) * radiance * NdotL;
	return ((1.0f - metallic) * brdf_diff + brdf_spec) * radiance * NdotL;
}

vec3 CalcReflectBRDF(vec3 L, vec3 N, vec3 albedo, float metallic, float roughness)
{
	float NdotL = max(dot(N, L), 0.f);
	
	vec3 F0 = vec3(0.1f);
	F0 = mix(F0, albedo, metallic);
	
	float NDF = min(1 / PI / (roughness + 0.0001), 1.0);
	//vec3 F = FresnelSchlick(NdotL, F0);
	vec3 F = F0;
	
	float G = GeometrySmithJointBaked(NdotL, NdotL, roughness);
	
	return min(NDF * G, 1.0) * F;
}

vec3 CalcLightBlinnPhong(vec3 light, vec3 normal, vec3 view, vec3 lightColor, vec3 albedo, float attenuation)
{
	vec3 halfVec = normalize(light + view);
	
	vec3 diff = albedo * max(dot(normal, light), 0.f) * lightColor * attenuation;
	vec3 spec = pow(max(dot(normal, halfVec), 0.f), /*specPower =*/32.f) * lightColor * attenuation;
	//spec = vec3(0,0,0);
	
	//return vec3(specV, specV, specV);
	return diff + spec;
}

vec3 CalcLight(Light lightData, vec3 normal, vec3 pos, vec3 view, vec3 albedo, float metallic, float roughness)
{
	vec3 light = -lightData.directionRAB.xyz;
	
	// attenuation
	float attenuation = 1.f;
	if(lightData.attenParams.x > 0.5f)
	{
		// radial
		light = lightData.positionInvR.xyz - pos;
		float dist = length(light);
		light /= dist;
		float attRatio = min(dist * lightData.positionInvR.w, 1.f);
		//attenuation = (1 - attRatio) * (1 - attRatio);
		// based on unreal, unreal uses attRatio ^ 4
		// we want more control over how it falloff, basically large radius allow more aggressive (up to ^8) which is closer to real physics
		// but small radius we bend it more (low as ^2) to have smoother edge, this blend value is sent in, but should be a lerp based on radius
		float attRatio4 = attRatio * attRatio;
		attRatio4 *= attRatio4;
		attRatio = mix(attRatio, attRatio4, lightData.directionRAB.w);
		//attRatio *= attRatio;
		attenuation = (1 - attRatio * attRatio);
		attenuation = (attenuation * attenuation) / (dist * dist + 1);
	}
	if(lightData.attenParams.y > 0.5f)
	{
		// spot
		//float spotRatio = min((1 - dot(light, -lightData.direction)) / (1 - lightData.cosHalfAngle), 1.f);
		float spotRatio = clamp((dot(light, -lightData.directionRAB.xyz) - lightData.attenParams.z) * lightData.attenParams.w, 0.f, 1.f);
		//attenuation *= (1 - spotRatio);
		attenuation *= spotRatio;
	}
	
	//return CalcLightBlinnPhong(light, normal, view, lightData.color, albedo, attenuation);
	//return CalcLightPBR(light, normal, view, lightData.color, albedo, metallic, roughness, attenuation);
	//return CalcLightPBR_op(light, normal, view, lightData.color, albedo, metallic, roughness, attenuation);
	return CalcLightPBR2(light, normal, view, lightData.color, albedo, metallic, roughness, attenuation);
}

#endif