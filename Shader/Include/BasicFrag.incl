#ifndef BASIC_FRAG_INCL
#define BASIC_FRAG_INCL

uniform vec4 tintColor;
uniform int hasDiffuseTex;
uniform sampler2D diffuseTex;
uniform int hasNormalTex;
uniform sampler2D normalTex;
uniform float metallic;
uniform float roughness;
uniform int hasRoughnessTex;
uniform sampler2D roughnessTex;
uniform int hasMaskTex;
uniform sampler2D maskTex;
uniform vec4 tile;

void GetBasicValue(in vec2 texCoords, in vec3 normal, in vec4 tangent,
	out vec2 uv, out vec3 outAlbedo, out vec3 outNormal, out vec4 outMaterial)
{	
	uv = texCoords * tile.xy + tile.zw;
		
	if(hasMaskTex > 0)
	{
		if(texture(maskTex, uv).r < 0.5)
			discard;
	}
	
	if(hasDiffuseTex > 0)
		outAlbedo = texture(diffuseTex, uv).rgb;
	else
		outAlbedo = vec3(1.0, 1.0, 1.0);
	outAlbedo *= tintColor.rgb;
	//outAlbedo = vec3(1,1,1);
	//outAlbedo = vec3(tangent.w * 0.5 + 0.5, 0.0, 0.0);
	
	vec3 faceNormal = normalize(normal);
	vec3 faceTangent = normalize(tangent.xyz);
	vec3 faceBitangent = cross(faceNormal, faceTangent) * tangent.w;
	//faceTangent = cross(faceBitangent, faceNormal) * tangent.w;
	mat3 TBN = mat3(faceTangent, faceBitangent, faceNormal);
	if(hasNormalTex > 0)
		outNormal = (TBN * normalize(texture(normalTex, uv).rgb * 2.0f - 1.0f)) * 0.5f + 0.5f;
	else
		outNormal = faceNormal * 0.5f + 0.5f;
	
	outMaterial = vec4(metallic, hasRoughnessTex > 0 ? 1 - texture(roughnessTex, uv).r : roughness, 0, 0);
}

#endif