#ifndef COMMON_UBO_INCL
#define COMMON_UBO_INCL

layout(std140) uniform RenderInfo
{
	mat4 viewMat;
	mat4 projMat;
	mat4 viewProjMat;
	mat4 invViewMat;
	mat4 prevViewMat;
	mat4 prevProjMat;
	mat4 prevViewProjMat;
	vec4 resolution; // x,y screen size, z near plane, w far plane
	float time;
	float exposure;
};

struct Light 
{
	vec4 positionInvR; // xyz position, w invRadius
	vec4 directionRAB; // xyz direction, w radial attenuation blend value
	vec4 color;
	vec4 attenParams; // x bRadial, y bSpot, z outerCosHalfAngle, w invDiffCosHalfAngle 
	int shadowParamA; // shadowDataCount for direction light, shadow matrix index for local light (-1 if no shadow)
	int shadowParamB; // for point light only, this is cube map index (-1 if use tetrahedron map)
};

struct ShadowData
{
	mat4 shadowMat;
	vec4 bounds; // x cascade width, y cascade height, z far plane
};

#define MAX_DIRECTIONAL_LIGHT_COUNT 4
#define MAX_CSM_COUNT 3

layout(std140) uniform GlobalLightsRenderInfo
{
	int globalLightCount;
	Light globalLights[MAX_DIRECTIONAL_LIGHT_COUNT];
	ShadowData globalShadowData[MAX_DIRECTIONAL_LIGHT_COUNT * MAX_CSM_COUNT];
};

layout(std430) buffer LocalLightsRenderInfo
{
	int localLightCount;
	Light localLights[];
};

layout(std430) buffer LocalLightsCullingInfo
{
	vec4 localLightsBounds[];
};

layout(std430) buffer LocalLightsShadowMatrixInfo
{
	mat4 localLightsShadowMatrices[];
};

#endif