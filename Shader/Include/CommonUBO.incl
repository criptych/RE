#ifndef COMMON_UBO_INCL
#define COMMON_UBO_INCL

layout(std140) uniform RenderInfo
{
	mat4 viewMat;
	mat4 projMat;
	mat4 viewProjMat;
	mat4 invViewMat;
	mat4 prevViewMat;
	mat4 prevProjMat;
	mat4 prevViewProjMat;
	vec4 resolution; // x,y screen size, z near plane, w far plane
	uint tileCountX;
	uint tileCountY;
	float time;
	float exposure;
};

struct Light 
{
	vec4 positionInvR; // xyz position, w invRadius
	vec4 directionRAB; // xyz direction, w radial attenuation blend value
	vec4 color;
	vec4 attenParams; // x bRadial, y bSpot, z outerCosHalfAngle, w invDiffCosHalfAngle 
	int shadowParamA; // shadowDataCount for direction light, shadow matrix index for local light (-1 if no shadow)
	int shadowParamB; // for point light only, this is cube map index (-1 if use tetrahedron map)
};

struct ShadowData
{
	mat4 shadowMat;
	vec4 bounds; // x cascade width, y cascade height, z far plane
};

#define MAX_DIRECTIONAL_LIGHT_COUNT 4
#define MAX_CSM_COUNT 3

layout(std140) uniform GlobalLightsRenderInfo
{
	int localLightCount;
	float maxLocalLightDist;
	int globalLightCount;
	Light globalLights[MAX_DIRECTIONAL_LIGHT_COUNT];
	ShadowData globalShadowData[MAX_DIRECTIONAL_LIGHT_COUNT * MAX_CSM_COUNT];
};

layout(std430) buffer LocalLightsRenderInfo
{
	Light localLights[];
};

layout(std430) buffer LocalLightsCullingInfo
{
	vec4 localLightsBounds[];
};

layout(std430) buffer LocalLightsShadowMatrixInfo
{
	mat4 localLightsShadowMatrices[];
};

#define MAX_TILE_LIGHTS 128

#define LIGHT_TILE_SIZE 16
#define LIGHT_TILE_INFO_STRIDE 4

// if 16 slices, use uint16 for light index, light index and mask can packed into one uint32
// else 32 slices, use uint32 for light index, light index and mask need two uint32
#define LIGHT_SLICES_PER_TILE 16
#define MAX_LIGHT_PER_SLICED_TILE 16
#define LIGHT_TILE_CULLING_RESULT_OFFSET 1


layout(std430) buffer LightTileInfo
{
	// layout as: 
	// tile info (4 uint): max dist as uint, min dist as uint, start offset, light count
	// min dist is to determine 1st slice, optimize for deferred pass
	uint lightTileInfoData[];
};

layout(std430) buffer LightTileCullingResultInfo
{
	// layout as: 
	// 0: reserved for increment
	// if LIGHT_TILE_16_SLICES, one uint per light (light index in higher bits, mask in lower bits)
	// else two uint per light, (light index, mask)
	uint lightTileCullingResultInfo[];
};
#endif