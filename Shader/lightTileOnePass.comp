#version 430 core

#include "Include/DeferredPassTex.incl"
#include "Include/CommonLighting.incl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba16f) writeonly uniform image2D outColor;

shared uint maxTileDepthUintBits;
shared uint minTileDepthUintBits;

	
#if LIGHT_SLICES_PER_TILE <= 16
shared uint tileLightIndices[MAX_TILE_LIGHTS];
#else
shared uint tileLightIndices[MAX_TILE_LIGHTS * 2];
#endif
shared uint tileLightCount;

uint ConditionalMin(uint A, uint B)
{
	uint minAB = min(A, B);
	uint maxAB = max(A, B);
	return minAB == 0 ? maxAB : minAB;
}

void main() 
{	
	uint tileIdx = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	
	vec2 uv = vec2(pixel_coords) / (resolution.xy - 1);
		
	float depth = texture(gDepthStencilTex, uv).r;
	
	if(gl_LocalInvocationIndex == 0)
	{
		maxTileDepthUintBits = 0;
		minTileDepthUintBits = 0x7F7FFFFF; // max float
		tileLightCount = 0;		
		if(tileIdx == 0)
		{
			// initialize culling result
			lightTileCullingResultInfo[0] = 0;
		}
	}	
	barrier(); // all invocation sync to this point
	memoryBarrierShared(); // writes to shared variables now visible for read
	
	float depthValue = -1;
	vec3 positionVS = vec3((uv * 2.0 - 1.0) / vec2(projMat[0][0], projMat[1][1]), -1);
	vec3 position = GetPositionVSFromDepth(depth, projMat, positionVS);
	// find out min/max depth
	if(depth < 1 && pixel_coords.x < resolution.x && pixel_coords.y < resolution.y)
	{
		depthValue = length(position);
		uint depthUnitBits = floatBitsToInt(depthValue);
		atomicMax(maxTileDepthUintBits, depthUnitBits);
		atomicMin(minTileDepthUintBits, depthUnitBits);
	}
	
	barrier();
	memoryBarrierShared();
	
	maxTileDepthUintBits = ConditionalMin(maxTileDepthUintBits, floatBitsToInt(maxLocalLightDist));
	
	float maxTileDepth = uintBitsToFloat(maxTileDepthUintBits);
	float minTileDepth = uintBitsToFloat(minTileDepthUintBits);
	
	// write to tile info
	float firstSliceMinDepth = maxTileDepth - maxTileDepth / float(LIGHT_SLICES_PER_TILE);
	if(minTileDepth >= maxTileDepth || minTileDepth < firstSliceMinDepth)
	{
		minTileDepth = firstSliceMinDepth;
		minTileDepthUintBits = floatBitsToInt(firstSliceMinDepth);
	}
	
		
	vec2 halfRes = (resolution.xy - 1) * 0.5;
	vec2 wh = vec2(projMat[0][0], projMat[1][1]) * halfRes;

	// top left
	vec2 tileOffset0 = (halfRes - gl_WorkGroupID.xy * gl_WorkGroupSize.xy);
	// bottom right
	vec2 tileOffset1 = tileOffset0 - gl_WorkGroupSize.xy;
	
	vec2 tileOffsetNorm0 = -tileOffset0 / wh;
	vec2 tileOffsetNorm1 = -tileOffset1 / wh;
	vec3 sides[4];
	sides[0] = normalize(vec3(tileOffsetNorm0.x, tileOffsetNorm0.y, -1)); // top left
	sides[1] = normalize(vec3(tileOffsetNorm1.x, tileOffsetNorm0.y, -1)); // top right
	sides[2] = normalize(vec3(tileOffsetNorm0.x, tileOffsetNorm1.y, -1)); // bottom left
	sides[3] = normalize(vec3(tileOffsetNorm1.x, tileOffsetNorm1.y, -1)); // bottom right
	vec3 center = normalize(sides[0] + sides[1] + sides[2] + sides[3]);
	float coneCos = min(min(min(dot(center, sides[0]), dot(center, sides[1])), dot(center, sides[2])), dot(center, sides[3]));
	float coneSin = sqrt(1 - coneCos * coneCos);
	
	uint maxLocalLightCount = localLightCount;
#if LIGHT_SLICES_PER_TILE <= 16
	maxLocalLightCount = min(maxLocalLightCount, 0xFFFF);
#endif
	// culling, here each thread run a light
	uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	for(uint lightIdx = gl_LocalInvocationIndex; lightIdx < maxLocalLightCount; lightIdx += threadCount)
	{
		vec4 lightBounds = localLightsBounds[lightIdx];		
		vec3 boundCenter = lightBounds.xyz;
		float boundRadius = lightBounds.w;
		float boundDistSqr = dot(boundCenter, boundCenter);
		float boundDist = sqrt(boundDistSqr);
		vec3 boundDir = boundCenter / boundDist;
		float boundSin = clamp(boundRadius / boundDist, 0.0, 1.0);
		float boundCos = sqrt(1 - boundSin * boundSin);
		
		float lightCos = dot(boundDir, center);
		float lightSin = sqrt(1 - lightCos * lightCos);
		float diffCos = (boundRadius > boundDist) ? -1.0 : coneCos * boundCos - coneSin * boundSin;
		
		// cone depth angle = light angle - cone angle
		float coneDepthSin = clamp(lightSin * coneCos - lightCos * coneSin, 0.0, 1.0);
		float coneDepthCos = (coneDepthSin == 0.0) ? 1.0 : lightCos * coneCos + lightSin * coneSin;
		float coneDepthRadius = sqrt(boundRadius * boundRadius - boundDistSqr * coneDepthSin * coneDepthSin);
		float coneDepthBaseLen = boundDist * coneDepthCos;
		
		float minConeDepth = coneDepthBaseLen - coneDepthRadius;
		float maxConeDepth = coneDepthBaseLen + coneDepthRadius;
		
		if(lightCos >= diffCos &&
			minConeDepth <= maxTileDepth &&
			maxConeDepth >= 0)
		{		
			// light over lap this tile
			uint mask = 0;
			uint maskBit = 1;
			float stepIncDepth = minTileDepth / float(LIGHT_SLICES_PER_TILE-1);
			float stepMaxDepth = maxTileDepth;
			float stepMinDepth = minTileDepth;

			for(int i = 0; i < LIGHT_SLICES_PER_TILE; ++i)
			{
				if(minConeDepth <= stepMaxDepth && maxConeDepth >= stepMinDepth)
					mask |= maskBit;
				maskBit = (maskBit << 1);
				stepMaxDepth = stepMinDepth;
				stepMinDepth -= stepIncDepth;
			}
			
			uint localTileLightListIdx = atomicAdd(tileLightCount, 1);
			if(localTileLightListIdx >= MAX_TILE_LIGHTS)
				break;
				
#if LIGHT_SLICES_PER_TILE <= 16
			tileLightIndices[localTileLightListIdx] = ((lightIdx << 16) | mask);
#else
			tileLightIndices[localTileLightListIdx*2] = lightIdx;			
			tileLightIndices[localTileLightListIdx*2+1] = mask;
#endif
		}
	}
	
	barrier();
	memoryBarrierShared();
	
	// write result
	if(gl_LocalInvocationIndex == 0)
	{
		uint tileCount = tileCountX * tileCountY;
		uint maxLightCount = tileCount * LIGHT_SLICES_PER_TILE * MAX_LIGHT_PER_SLICED_TILE;
		tileLightCount = min(tileLightCount, MAX_TILE_LIGHTS);
		uint tileLightListIdx = atomicAdd(lightTileCullingResultInfo[0], tileLightCount);
		tileLightCount = max(min(maxLightCount - tileLightListIdx, tileLightCount), 0);
		tileLightListIdx = min(tileLightListIdx, maxLightCount-1);
		uint tileInfoDataBase = tileIdx * LIGHT_TILE_INFO_STRIDE;
		lightTileInfoData[tileInfoDataBase] = maxTileDepthUintBits;
		lightTileInfoData[tileInfoDataBase + 1] = minTileDepthUintBits;
		lightTileInfoData[tileInfoDataBase + 2] = tileLightListIdx;
		lightTileInfoData[tileInfoDataBase + 3] = tileLightCount;
		for(uint i = 0; i < tileLightCount; ++i)
		{
	#if LIGHT_SLICES_PER_TILE <= 16
			uint baseIdx = LIGHT_TILE_CULLING_RESULT_OFFSET + tileLightListIdx + i;
			lightTileCullingResultInfo[baseIdx] = tileLightIndices[i];
	#else
			uint baseIdx = LIGHT_TILE_CULLING_RESULT_OFFSET + (tileLightListIdx + i) * 2;
			lightTileCullingResultInfo[baseIdx] = tileLightIndices[i*2];
			lightTileCullingResultInfo[baseIdx + 1] = tileLightIndices[i*2 + 1];
	#endif
		}
	}
	
	// lighting
	if(depth < 1 && pixel_coords.x < resolution.x && pixel_coords.y < resolution.y)
	{
		vec3 lightingResult = vec3(0);
		vec3 normal = normalize(texture(gNormalTex, uv).rgb * 2.0f - 1.0f);
		vec3 view = -position / depthValue;//normalize(-position);
		vec3 albedo = texture(gAlbedoTex, uv).rgb;
		vec4 material = texture(gMaterialTex, uv);
		float metallic = material.r;
		float roughness = material.g;
		float ao = material.a;
		
		// global lights
		CalcGlobalLights(lightingResult, position, normal, view, albedo, metallic, roughness, ao);		
		
		// local lights
		uint affectedLocalLightCount = tileLightCount;
		uint slice = 0;
		if(depthValue < minTileDepth)
			slice = uint(clamp((minTileDepth - depthValue) / minTileDepth * (LIGHT_SLICES_PER_TILE - 1) + 1, 1, LIGHT_SLICES_PER_TILE-1));
		uint pixelMask = 1 << slice;
		if(depthValue > maxLocalLightDist)
			affectedLocalLightCount = 0;
		
		for(uint i = 0; i < affectedLocalLightCount; ++i)
		{
	#if LIGHT_SLICES_PER_TILE <= 16
			uint cullingResult = tileLightIndices[i];
			if((cullingResult & pixelMask) == 0)
				continue;
			uint lightIdx = (cullingResult >> 16);
	#else
			uint lightIdx = tileLightIndices[i*2];
			uint mask = tileLightIndices[i*2 + 1];
			if((mask & pixelMask) == 0)
				continue;
	#endif
			Light light = localLights[lightIdx];
			
			vec3 localLightResult = CalcLight(light, normal, position, view, albedo, metallic, roughness);
			float shadowFactor = CalcShadowGeneral(light, position, normal);
			lightingResult += localLightResult * min(shadowFactor, 1-ao);
		}
	
		//vec2 localUV = vec2(gl_LocalInvocationID.xy) / vec2(gl_WorkGroupSize.xy);
	
	
		imageStore(outColor, pixel_coords, vec4(lightingResult, 0.0));
	}
}